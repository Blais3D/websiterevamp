import classNames from "classnames";
import type { NextPage } from "next";
import Head from "next/head";
import React, { useState } from "react";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>PokeDex on Blais.gg</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="" href="" />
      </Head>

      <main className="p-6 justify-center items-center">
        <div className="container flex flex-wrap items-center justify-start gap-5">
          {AllPokemon()}
        </div>
      </main>
    </>
  );
};

type PokemonCardProps = {
  ID: number;
  name: String;
  types: String[];
  sprite: String;
};

const dashesSpacesList: String[] = [
  "tapu-lele",
  "tapu-koko",
  "tapu-bulu",
  "tapu-fini",
];

function fixList(PokeName: String) {
  if (PokeName == "nidoran-f") {
    return "Nidoran Female";
  } else if (PokeName == "nidoran-m") {
    return "Nidoran Male";
  } else if (PokeName == "mime-jr") {
    return "Mime Jr.";
  } else if (PokeName == "type-null") {
    return "Type: Null";
  } else if (PokeName == "porygon-z") {
    return "Porygon-Z";
  } else if (PokeName == "ho-oh") {
    return "Ho-Oh";
  } else if (PokeName == "mr-mime") {
    return "Mr. Mime";
  } else if (PokeName == "mr-rime") {
    return "Mr. Rime";
  } else if (dashesSpacesList.includes(PokeName)) {
    if (PokeName?.length > 0) {
      let newPokeName: string;
      newPokeName =
        PokeName.charAt(0).toUpperCase() +
        PokeName.substring(1, PokeName.indexOf("-")) +
        " " +
        PokeName.charAt(PokeName.indexOf("-") + 1).toUpperCase() +
        PokeName.substring(PokeName.indexOf("-") + 2);
      return newPokeName;
    }
  } else {
    if (PokeName?.length > 0) {
      return PokeName.charAt(0).toUpperCase() + PokeName.substring(1);
    }
  }
}

function AllPokemon() {
  const names = trpc.useQuery(["pokemon-get-names", { id: 0 }]);
  const PokeNames: PokemonCardProps[] = [];
  for (let i = 0; i < 905; i++) {
    PokeNames.push({
      ID: i + 1,
      name: fixList(names.data?.results[i]?.name as string) as string,
      types: [],
      sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${
        i + 1
      }.png`,
    });
  }

  return (
    <>
      {PokeNames.map((item, index) => {
        return PokeButton(item);
      })}
    </>
  );
}

function PokeButton(Poke: PokemonCardProps) {
  const [PokeButton, setPokeButton] = useState(true);

  const btnClass: string = classNames(
    "flex flex-col w-48 h-48 justify-center items-center p-6 rounded-md border-4 motion-safe:hover:scale-105 duration-500",
    { "bg-grey-400": PokeButton, "bg-green-400": !PokeButton }
  );

  return (
    <button
      onClick={() => {
        setPokeButton(!PokeButton);
      }}
      className={btnClass}
    >
      <h3 className="font-bold text-gray-600">
        {Poke.ID}. {Poke.name as string}
      </h3>
      <img src={Poke.sprite as string} className="w-full" />
    </button>
  );
}

export default Home;
